import json
from skimage.transform import resize
import matplotlib.pyplot as plt
import torch
from datetime import datetime
import numpy as np
import cv2
import os
import redis
import hashlib
import traceback
from .services import get_image_satellitaire , get_bbox_from_long_lat
from .configuration import CLIENT_ID , CLIENT_SECRET
from .artificial_intelligence import FloodDetectionCNN , preprocess_sar_image_in_memory
from .cache import FloodPredictionCache

MODEL_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'models', 'best_model.pth')


SEUIL_FAIBLE=20
SEUIL_MOYEN=50
SEUIL_ELEV√â=70
CACHE = FloodPredictionCache()

def load_model(model_path):
    """
    Charge un mod√®le PyTorch depuis le chemin sp√©cifi√©
    
    Args:
        model_path (str): Chemin vers le fichier de poids du mod√®le (.pth)
        
    Returns:
        torch.nn.Module: Le mod√®le charg√© en mode √©valuation
    """
    try:

        model_path = MODEL_PATH
        model = FloodDetectionCNN(
            num_classes=2,      # Inond√© ou non inond√©
            input_channels=2,   # VH et VV (2 canaux)
            dropout_rate=0.5
        )
        
        # 2. Charger les poids du mod√®le (state_dict)
        state_dict = torch.load(model_path, map_location=torch.device('cpu'))
        
        # 3. Appliquer les poids au mod√®le
        model.load_state_dict(state_dict)
        
        # 4. Mettre en mode √©valuation
        model.eval()
        
        print(f"Mod√®le charg√© avec succ√®s depuis {model_path}")
        return model
        
    except Exception as e:
        print(f"Erreur lors du chargement du mod√®le: {str(e)}")
        traceback.print_exc()
        raise


def predict_flood(longitude, latitude, size_km=5, start_date="2025-01-30", end_date="2025-02-07"):
    """
    Fonction simplifi√©e pour pr√©dire les inondations √† partir de coordonn√©es
    """
    try:
        print(f"Analyse de la zone: {longitude}, {latitude} (rayon {size_km}km)")
        
        cached_prediction = CACHE.get_prediction(longitude, latitude, size_km, start_date, end_date)
        if cached_prediction:
            print("Utilisation du r√©sultat en cache")
            return cached_prediction
        
        print("üîÑ Aucune donn√©e en cache, traitement en cours...")
        results_dir = "resultats_image"
        os.makedirs(results_dir, exist_ok=True)

        # 1. R√©cup√©rer les coordonn√©es de la bbox
        bbox_coords = get_bbox_from_long_lat(longitude, latitude, size_km)
        print(f"Coordonn√©es bbox: {bbox_coords}")
        
        # 2. R√©cup√©rer l'image satellitaire
        save_path = f"flood_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tiff"
        print(f"R√©cup√©ration de l'image satellitaire...")
        
        image = get_image_satellitaire(
            CLIENT_ID, CLIENT_SECRET,
            bbox_coords=bbox_coords,
            start_date=start_date,
            end_date=end_date,
            orbit_direction="DESCENDING",
            resolution=10,
            is_visualised=False,
            save_path=save_path
        )
        if image is None or np.isnan(image).any():
            print("‚ö†Ô∏è Image non disponible ou contenant des valeurs NaN")
            return {
                'success': False, 
                'error': "Pas d'image disponible pour cette zone ou cette p√©riode"
            }
        
        # 3. Pr√©traiter l'image pour le mod√®le
        print("Pr√©traitement de l'image...")
        image_tensor = preprocess_sar_image_in_memory(
            image, 
            output_dir="flood_prediction/temp",
            visualize=False
        )
        
        # V√©rifier que le tenseur existe
        if image_tensor is None:
            raise ValueError("Le pr√©traitement de l'image a √©chou√© - image_tensor est None")
        
        print(f"Forme du tenseur d'image: {image_tensor.shape}")
        
        # Extraire VV et VH - CORRIG√â pour le format [canaux, hauteur, largeur]
        vv_band = image_tensor[0, :, :].numpy()  # Premier canal (VV)
        vh_band = image_tensor[1, :, :].numpy()  # Second canal (VH)
        # Ajouter la dimension batch
        image_tensor = image_tensor.unsqueeze(0)
        
        model_path = MODEL_PATH
        
        # 4. Charger le mod√®le
        print(f"Chargement du mod√®le: {model_path}")
        model = load_model(model_path)
    
        # 5. Faire la pr√©diction
        print("Pr√©diction en cours...")
        model.eval()  # Mode √©valuation
        
        with torch.no_grad():
            outputs = model(image_tensor)
            # Convertir en probabilit√©s avec sigmoid
            flood_probability = torch.sigmoid(outputs[:, 1]).item()

            # Obtenir la classe pr√©dite (0=non inond√©, 1=inond√©)
            _, predicted = torch.max(outputs, 1)
            
            # Calculer les m√©triques
            flood_class = predicted.item()  # 0 ou 1 pour toute l'image
            flood_percentage = flood_probability * 100  # Probabilit√© d'inondation
            confidence = max(flood_probability, 1 - flood_probability) * 100  # Confiance (0-100%)



        # 6. Cr√©er une visualisation
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_path = os.path.join(results_dir, f"flood_prediction_{timestamp}.png")
        
        plt.figure(figsize=(12, 12))
        
        # Visualiser l'image VV originale
        plt.subplot(2, 1, 1)
        plt.imshow(vv_band, cmap='gray')
        plt.title("Image SAR originale (VV)")
        plt.colorbar()
        plt.axis('off')
        
        # CORRECTION : Visualiser l'image avec une couleur selon la pr√©diction
        plt.subplot(2, 1, 2)
        # Cr√©er une superposition de couleur selon la pr√©diction
        if flood_class == 1:  # Si class√© comme inond√©
            # Afficher l'image avec une teinte rouge pour indiquer l'inondation
            plt.imshow(vv_band, cmap='gray')
            plt.imshow(np.ones_like(vv_band), cmap='autumn', alpha=0.5)
            title = f"ZONE INOND√âE (confiance: {flood_percentage:.1f}%)"
        else:
            # Afficher l'image avec une teinte bleue pour indiquer l'absence d'inondation
            plt.imshow(vv_band, cmap='gray')
            plt.imshow(np.zeros_like(vv_band), cmap='autumn', alpha=0.3)
            title = f"ZONE NON INOND√âE (confiance: {100-flood_percentage:.1f}%)"
        
        plt.title(title)
        plt.colorbar()
        plt.axis('off')
        
        plt.tight_layout()
        plt.savefig(output_path)
        
        # 7. D√©terminer le niveau de risque
        if flood_percentage < SEUIL_FAIBLE :
            risk_level = "Faible"
        elif flood_percentage < SEUIL_MOYEN:
            risk_level = "Mod√©r√©"
        elif flood_percentage < SEUIL_ELEV√â:
            risk_level = "√âlev√©"
        else:
            risk_level = "Tr√®s √©lev√©"
        
        # 8. Pr√©parer et retourner les r√©sultats
        result = {
            'success': True,
            'coordinates': {
                'longitude': longitude,
                'latitude': latitude,
                'bbox': bbox_coords
            },
            'prediction': {
                'flood_percentage': round(flood_percentage, 2),
                'confidence': round(confidence, 2),
                'risk_level': risk_level,
                'is_flooded': bool(flood_class)
            },
            'files': {
                'input_image': save_path,
                'output_visualization': output_path
            }
        }
        
        print(f"Analyse termin√©e! R√©sultat: {risk_level} risque d'inondation")
        print(f"Pourcentage de zone inond√©e: {flood_percentage:.2f}%")
        print(f"Confiance: {confidence:.2f}%")
        CACHE.save_prediction(longitude, latitude, size_km, start_date, end_date, result)

        return result
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {'success': False, 'error': str(e)}


""" √† ajouter logique lstm """